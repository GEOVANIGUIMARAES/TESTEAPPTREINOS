import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } => "@/components/ui/textarea";
import html2pdf from "html2pdf.js";
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css'; // Certifique-se de que este CSS est√° acess√≠vel
import { Pie } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';

// Registra os elementos necess√°rios do Chart.js
ChartJS.register(ArcElement, Tooltip, Legend);

export default function ZigTreino() { // O nome do componente pode permanecer assim no arquivo
  const [treinos, setTreinos] = useState([]);
  const [novoTreino, setNovoTreino] = useState({ nome: "", exercicios: "", data: "", paraUsuarioId: "" });
  const [mensagemErro, setMensagemErro] = useState("");
  const [treinoEmEdicao, setTreinoEmEdicao] = useState(null);
  const [filtroStatus, setFiltroStatus] = useState("todos");

  const [usuarios, setUsuarios] = useState([]);
  const [usuarioLogado, setUsuarioLogado] = useState(null);
  const [novoUsuarioNome, setNovoUsuarioNome] = useState("");
  const [usuarioSelecionadoParaPrescrever, setUsuarioSelecionadoParaPrescrever] = useState("");

  const [dataSelecionadaCalendario, setDataSelecionadaCalendario] = useState(new Date());
  const [treinosDoDiaSelecionado, setTreinosDoDiaSelecionado] = useState([]);

  // Efeito para carregar/inicializar usu√°rios e simular login
  useEffect(() => {
    const usuariosSalvos = localStorage.getItem("zig_usuarios");
    if (usuariosSalvos) {
      const parsedUsuarios = JSON.parse(usuariosSalvos);
      setUsuarios(parsedUsuarios);
      const adminUser = parsedUsuarios.find(u => u.tipo === "admin");
      if (adminUser) {
        setUsuarioLogado(adminUser);
      } else if (parsedUsuarios.length > 0) {
        setUsuarioLogado(parsedUsuarios[0]);
      } else {
        const defaultAdmin = { id: Date.now(), nome: "Admin Padr√£o", tipo: "admin" };
        setUsuarios([defaultAdmin]);
        setUsuarioLogado(defaultAdmin);
        localStorage.setItem("zig_usuarios", JSON.stringify([defaultAdmin]));
      }
    } else {
      const defaultAdmin = { id: Date.now(), nome: "Admin Padr√£o", tipo: "admin" };
      setUsuarios([defaultAdmin]);
      setUsuarioLogado(defaultAdmin);
      localStorage.setItem("zig_usuarios", JSON.stringify([defaultAdmin]));
    }
  }, []);

  // Efeito para persistir usu√°rios
  useEffect(() => {
    localStorage.setItem("zig_usuarios", JSON.stringify(usuarios));
  }, [usuarios]);

  // Efeito para carregar treinos do usu√°rio logado
  useEffect(() => {
    if (usuarioLogado) {
      const salvos = localStorage.getItem(`zig_treinos_${usuarioLogado.id}`);
      if (salvos) setTreinos(JSON.parse(salvos));
      else setTreinos([]); // Limpa treinos se o usu√°rio n√£o tiver nenhum salvo
    }
  }, [usuarioLogado]);

  // Efeito para persistir treinos do usu√°rio logado
  useEffect(() => {
    if (usuarioLogado) {
      if (treinos.length > 0) {
        localStorage.setItem(`zig_treinos_${usuarioLogado.id}`, JSON.stringify(treinos));
      } else {
        localStorage.removeItem(`zig_treinos_${usuarioLogado.id}`); // Limpa se n√£o houver treinos
      }
    }
  }, [treinos, usuarioLogado]);

  // Efeito para filtrar treinos quando a data do calend√°rio muda ou os treinos s√£o atualizados
  useEffect(() => {
    if (dataSelecionadaCalendario && treinos.length > 0) {
      const dataFormatada = dataSelecionadaCalendario.toISOString().split('T')[0];
      const treinosFiltradosPorData = treinos.filter(treino => treino.data === dataFormatada);
      setTreinosDoDiaSelecionado(treinosFiltradosPorData);
    } else {
      setTreinosDoDiaSelecionado([]);
    }
  }, [dataSelecionadaCalendario, treinos]);

  // Fun√ß√£o para adicionar um novo usu√°rio
  const adicionarUsuario = () => {
    if (!novoUsuarioNome.trim()) {
      setMensagemErro("O nome do novo usu√°rio n√£o pode ser vazio.");
      return;
    }
    const novoId = Date.now();
    setUsuarios([...usuarios, { id: novoId, nome: novoUsuarioNome, tipo: "usuario" }]);
    setNovoUsuarioNome("");
    setMensagemErro("");
  };

  // Fun√ß√£o para mudar o usu√°rio logado (simula√ß√£o de login)
  const mudarUsuarioLogado = (id) => {
    const user = usuarios.find(u => u.id === parseInt(id));
    if (user) {
      setUsuarioLogado(user);
      const treinosDoNovoUsuario = localStorage.getItem(`zig_treinos_${user.id}`);
      setTreinos(treinosDoNovoUsuario ? JSON.parse(treinosDoNovoUsuario) : []);
      setFiltroStatus("todos"); // Reseta o filtro ao trocar de usu√°rio
    }
  };

  const isUsuarioAdmin = usuarioLogado?.tipo === "admin";

  // Fun√ß√£o para adicionar/prescrever um treino
  const adicionarTreino = () => {
    if (!novoTreino.nome.trim() || !novoTreino.data.trim() || !novoTreino.exercicios.trim()) {
      setMensagemErro("Por favor, preencha todos os campos obrigat√≥rios: Nome, Data e Exerc√≠cios.");
      return;
    }

    if (isUsuarioAdmin && !usuarioSelecionadoParaPrescrever) {
        setMensagemErro("Por favor, selecione um usu√°rio para quem prescrever o treino.");
        return;
    }

    setMensagemErro("");
    const targetUserId = isUsuarioAdmin ? parseInt(usuarioSelecionadoParaPrescrever) : usuarioLogado.id;

    const treinosDoUsuarioAlvoSalvos = localStorage.getItem(`zig_treinos_${targetUserId}`);
    const treinosDoUsuarioAlvo = treinosDoUsuarioAlvoSalvos ? JSON.parse(treinosDoUsuarioAlvoSalvos) : [];

    const novosTreinosParaAlvo = [
      ...treinosDoUsuarioAlvo,
      { ...novoTreino, id: Date.now(), concluido: false, paraUsuarioId: targetUserId },
    ];
    localStorage.setItem(`zig_treinos_${targetUserId}`, JSON.stringify(novosTreinosParaAlvo));

    if (targetUserId === usuarioLogado.id) {
        setTreinos(novosTreinosParaAlvo);
    } else if (isUsuarioAdmin) {
        alert(`Treino '${novoTreino.nome}' prescrito para ${usuarios.find(u => u.id === targetUserId)?.nome || 'usu√°rio desconhecido'}.`);
    }

    setNovoTreino({ nome: "", exercicios: "", data: "", paraUsuarioId: "" });
    setUsuarioSelecionadoParaPrescrever("");
  };

  // Fun√ß√£o para remover um treino
  const removerTreino = (id) => {
    // Permiss√£o: Apenas admins podem remover qualquer treino; usu√°rios comuns s√≥ os deles
    if (!isUsuarioAdmin && treinos.find(t => t.id === id)?.paraUsuarioId !== usuarioLogado?.id) {
        return;
    }
    setTreinos(treinos.filter((t) => t.id !== id));
  };

  // Fun√ß√£o para alternar o status de conclus√£o de um treino
  const alternarConcluido = (id) => {
    // Permiss√£o: Apenas admins podem alterar qualquer treino; usu√°rios comuns s√≥ os deles
    if (!isUsuarioAdmin && treinos.find(t => t.id === id)?.paraUsuarioId !== usuarioLogado?.id) {
        return;
    }
    setTreinos(
      treinos.map((t) =>
        t.id === id ? { ...t, concluido: !t.concluido } : t
      )
    );
  };

  // Fun√ß√£o para iniciar a edi√ß√£o de um treino
  const iniciarEdicao = (treino) => {
    setTreinoEmEdicao(treino.id);
    setNovoTreino({
      nome: treino.nome,
      exercicios: treino.exercicios,
      data: treino.data,
      paraUsuarioId: treino.paraUsuarioId
    });
    setMensagemErro("");
  };

  // Fun√ß√£o para cancelar a edi√ß√£o
  const cancelarEdicao = () => {
    setTreinoEmEdicao(null);
    setNovoTreino({ nome: "", exercicios: "", data: "", paraUsuarioId: "" });
    setMensagemErro("");
  };

  // Fun√ß√£o para salvar as edi√ß√µes de um treino
  const salvarEdicao = () => {
    if (!novoTreino.nome.trim() || !novoTreino.data.trim() || !novoTreino.exercicios.trim()) {
      setMensagemErro("Por favor, preencha todos os campos para salvar a edi√ß√£o.");
      return;
    }

    // Permiss√£o: Apenas admins podem editar qualquer treino; usu√°rios comuns s√≥ os deles
    if (!isUsuarioAdmin && treinos.find(t => t.id === treinoEmEdicao)?.paraUsuarioId !== usuarioLogado?.id) {
        return;
    }
    setMensagemErro("");

    setTreinos(
      treinos.map((t) =>
        t.id === treinoEmEdicao
          ? { ...t, nome: novoTreino.nome, exercicios: novoTreino.exercicios, data: novoTreino.data }
          : t
      )
    );
    cancelarEdicao();
  };

  // Fun√ß√£o para exportar relat√≥rio em PDF
  const exportarPDF = () => {
    const element = document.getElementById("relatorio");
    html2pdf().from(element).save("diario-de-treino.pdf"); // Nome do arquivo PDF atualizado
  };

  const totalTreinos = treinos.length;
  const concluidos = treinos.filter((t) => t.concluido).length;
  const pendentes = totalTreinos - concluidos;

  // Filtra os treinos com base no status selecionado
  const treinosFiltrados = treinos.filter((treino) => {
    if (filtroStatus === "concluidos") {
      return treino.concluido;
    }
    if (filtroStatus === "pendentes") {
      return !treino.concluido;
    }
    return true; // Retorna todos se o filtro for 'todos'
  });

  // Dados para o gr√°fico de pizza
  const dadosGrafico = {
    labels: ['Conclu√≠dos', 'Pendentes'],
    datasets: [
      {
        data: [concluidos, pendentes],
        backgroundColor: ['#22C55E', '#EF4444'], // Verde para conclu√≠dos, Vermelho para pendentes
        borderColor: ['#FFFFFF', '#FFFFFF'],
        borderWidth: 1,
      },
    ],
  };

  // Op√ß√µes para o gr√°fico de pizza
  const opcoesGrafico = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Propor√ß√£o de Treinos',
      },
    },
  };

  return (
    <div className="p-6 max-w-3xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">üèãÔ∏è‚Äç‚ôÇÔ∏è Di√°rio de Treino</h1>

      {/* Se√ß√£o de Gerenciamento de Usu√°rios */}
      <Card className="mb-6">
        <CardContent className="pt-6 space-y-3">
          <h2 className="text-lg font-semibold">üë§ Gerenciamento de Usu√°rios</h2>
          {usuarioLogado && (
            <p className="text-sm">
              Usu√°rio Logado: **{usuarioLogado.nome}** (Tipo: {usuarioLogado.tipo})
            </p>
          )}

          {isUsuarioAdmin && (
            <>
              <div className="flex gap-2">
                <Input
                  placeholder="Nome do novo usu√°rio"
                  value={novoUsuarioNome}
                  onChange={(e) => setNovoUsuarioNome(e.target.value)}
                />
                <Button onClick={adicionarUsuario}>Criar Usu√°rio</Button>
              </div>
            </>
          )}

          <div className="flex items-center gap-2">
            <label htmlFor="selecionar-usuario" className="text-sm font-medium">Trocar Usu√°rio:</label>
            <select
              id="selecionar-usuario"
              className="p-2 border rounded-md"
              value={usuarioLogado?.id || ""}
              onChange={(e) => mudarUsuarioLogado(e.target.value)}
            >
              <option value="">Selecione um usu√°rio</option>
              {usuarios.map((user) => (
                <option key={user.id} value={user.id}>
                  {user.nome} ({user.tipo})
                </option>
              ))}
            </select>
          </div>
        </CardContent>
      </Card>

      {/* Formul√°rio de Adi√ß√£o/Edi√ß√£o de Treinos (vis√≠vel apenas para Admin) */}
      {isUsuarioAdmin && (
        <Card className="mb-6">
          <CardContent className="space-y-3 pt-6">
            <h2 className="text-lg font-semibold">{treinoEmEdicao ? "Editar Treino" : "Prescrever Novo Treino"}</h2>
            <Input
              placeholder={treinoEmEdicao ? "Novo nome para o treino" : "Nome do treino (ex: Peito e tr√≠ceps)"}
              value={novoTreino.nome}
              onChange={(e) => setNovoTreino({ ...novoTreino, nome: e.target.value })}
            />
            <Input
              type="date"
              value={novoTreino.data}
              onChange={(e) => setNovoTreino({ ...novoTreino, data: e.target.value })}
            />
            <Textarea
              placeholder="Exerc√≠cios (ex: Supino 3x10, Tr√≠ceps pulley 3x12...)"
              value={novoTreino.exercicios}
              onChange={(e) => setNovoTreino({ ...novoTreino, exercicios: e.target.value })}
            />
            {isUsuarioAdmin && (
              <div className="flex items-center gap-2">
                <label htmlFor="prescrever-para" className="text-sm font-medium">Prescrever para:</label>
                <select
                  id="prescrever-para"
                  className="p-2 border rounded-md flex-grow"
                  value={usuarioSelecionadoParaPrescrever}
                  onChange={(e) => setUsuarioSelecionadoParaPrescrever(e.target.value)}
                >
                  <option value="">Selecione um usu√°rio</option>
                  {usuarios.map((user) => (
                    <option key={user.id} value={user.id}>
                      {user.nome}
                    </option>
                  ))}
                </select>
              </div>
            )}
            {treinoEmEdicao ? (
              <div className="flex gap-2">
                <Button onClick={salvarEdicao}>Salvar Edi√ß√£o</Button>
                <Button variant="outline" onClick={cancelarEdicao}>Cancelar</Button>
              </div>
            ) : (
              <Button onClick={adicionarTreino}>Prescrever Treino</Button>
            )}
            {mensagemErro && (
              <p className="text-red-500 text-sm">{mensagemErro}</p>
            )}
          </CardContent>
        </Card>
      )}

      {/* Se√ß√£o de Estat√≠sticas e Gr√°fico */}
      <Card className="mb-6">
        <CardContent className="pt-4 space-y-2">
          <h2 className="text-lg font-semibold">üìä Estat√≠sticas ({usuarioLogado?.nome || 'Selecione um Usu√°rio'})</h2>
          <p>Total de treinos: {totalTreinos}</p>
          <p>Conclu√≠dos: {concluidos}</p>
          <p>Pendentes: {pendentes}</p>
          {isUsuarioAdmin && (
            <Button variant="outline" onClick={exportarPDF}>üìÑ Exportar Relat√≥rio em PDF</Button>
          )}

          {totalTreinos > 0 && (
            <div className="w-full md:w-1/2 mx-auto mt-4">
              <Pie data={dadosGrafico} options={opcoesGrafico} />
            </div>
          )}
          {totalTreinos === 0 && (
            <p className="text-sm text-muted-foreground mt-4">Adicione treinos para ver as estat√≠sticas.</p>
          )}

          <div className="flex gap-2 mt-4">
            <Button
              variant={filtroStatus === "todos" ? "default" : "outline"}
              onClick={() => setFiltroStatus("todos")}
            >
              Todos
            </Button>
            <Button
              variant={filtroStatus === "concluidos" ? "default" : "outline"}
              onClick={() => setFiltroStatus("concluidos")}
            >
              Conclu√≠dos
            </Button>
            <Button
              variant={filtroStatus === "pendentes" ? "default" : "outline"}
              onClick={() => setFiltroStatus("pendentes")}
            >
              Pendentes
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Se√ß√£o de Calend√°rio */}
      <Card className="mb-6">
        <CardContent className="pt-4 space-y-3">
          <h2 className="text-lg font-semibold">üìÖ Visualiza√ß√£o em Calend√°rio</h2>
          <Calendar
            onChange={setDataSelecionadaCalendario}
            value={dataSelecionadaCalendario}
            className="w-full border rounded-lg shadow-sm"
            tileContent={({ date, view }) => {
              if (view === 'month') {
                const dataFormatada = date.toISOString().split('T')[0];
                const treinosNoDia = treinos.filter(t => t.data === dataFormatada);
                if (treinosNoDia.length > 0) {
                  const todosConcluidos = treinosNoDia.every(t => t.concluido);
                  return (
                    <div className="flex justify-center items-center h-full">
                      {todosConcluidos ? (
                        <span role="img" aria-label="Todos conclu√≠dos" title="Todos conclu√≠dos">‚úÖ</span>
                      ) : (
                        <span role="img" aria-label="Treinos pendentes" title="Treinos pendentes">‚ö†Ô∏è</span>
                      )}
                    </div>
                  );
                }
              }
            }}
          />
          <h3 className="text-md font-semibold mt-4">Treinos para {dataSelecionadaCalendario.toLocaleDateString('pt-BR')}:</h3>
          {treinosDoDiaSelecionado.length > 0 ? (
            <ul className="list-disc pl-5">
              {treinosDoDiaSelecionado.map(treino => (
                <li key={treino.id} className="text-sm">
                  **{treino.nome}** - {treino.concluido ? "Conclu√≠do" : "Pendente"}
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-sm text-muted-foreground">Nenhum treino agendado para esta data.</p>
          )}
        </CardContent>
      </Card>

      {/* Listagem de Treinos */}
      <div className="space-y-4" id="relatorio">
        <h2 className="text-xl font-bold mb-3">Treinos de {usuarioLogado?.nome || 'Nenhum Usu√°rio Selecionado'}</h2>
        {treinosFiltrados
          .sort((a, b) => new Date(a.data) - new Date(b.data))
          .map((treino) => (
            <Card key={treino.id} className="bg-gray-50">
              <CardContent className="pt-4">
                <div className="flex justify-between items-start">
                  <div>
                    <h2 className="font-semibold text-lg">
                      {treino.nome} - <span className="text-sm text-muted-foreground">{treino.data}</span>
                    </h2>
                    <p className="text-sm whitespace-pre-line">{treino.exercicios}</p>
                    <p className="text-sm mt-1">
                      Status: {treino.concluido ? "‚úÖ Conclu√≠do" : "‚ùå Pendente"}
                    </p>
                    <div className="flex gap-2 mt-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => alternarConcluido(treino.id)}
                      >
                        {treino.concluido ? "Desmarcar Conclu√≠do" : "Marcar como Conclu√≠do"}
                      </Button>
                      {isUsuarioAdmin && (
                        <>
                          <Button
                            size="sm"
                            variant="secondary"
                            onClick={() => iniciarEdicao(treino)}
                          >
                            Editar
                          </Button>
                          <Button
                            variant="destructive"
                            size="sm"
                            onClick={() => removerTreino(treino.id)}
                          >
                            Remover
                          </Button>
                        </>
                      )}
                    </div>
                  </div>
                  {!isUsuarioAdmin && (
                     <Button
                        variant="destructive"
                        size="sm"
                        onClick={() => removerTreino(treino.id)}
                      >
                        Remover
                      </Button>
                  )}
                </div>
              </CardContent>
            </Card>
          ))}
          {treinosFiltrados.length === 0 && (
              <p className="text-center text-muted-foreground">Nenhum treino encontrado para este usu√°rio ou filtro.</p>
          )}
      </div>
    </div>
  );
}
